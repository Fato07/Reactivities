{"version":3,"sources":["app/common/util/util.ts","app/api/agent.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/options/categoryOptions.ts","app/common/form/DateInput.tsx","app/common/form/SelectInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","app/layout/LoadingComponenet.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropZone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilter.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashBoard.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["setActivityProps","activity","user","date","Date","isGoing","userActivities","some","a","username","isHost","createAttendee","displayName","image","axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","console","log","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","actvityId","create","update","activityId","attend","unattend","current","login","register","getProfile","uploadPhoto","photo","setMainPhoto","id","deletePhoto","updateProfile","profile","follow","unfollow","listfollowings","predicate","listActivities","ActivityStore","observable","ref","rootStore","this","reaction","keys","page","activityRegistry","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","action","set","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","state","invoke","catch","on","comment","runInAction","comments","stop","err","loadingInitial","agent","axiosParams","activitiesEnvelope","userStore","getActivity","toJS","submitting","attendee","attendees","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","imageUrl","find","following","followersCount","profiles","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logOut","Menu","fixed","inverted","Container","Item","header","as","NavLink","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","TextInput","input","width","type","placeholder","meta","touched","Form","Field","Label","basic","color","ErrorMessage","Message","Header","statusText","length","List","flat","map","i","Content","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","form","invalid","pristine","dirtySinceLastSubmit","textAlign","component","disabled","fluid","RegisterForm","HomePage","isLoggedIn","openModal","Segment","vertical","className","size","marginBottom","ActivityFormValues","init","title","category","description","time","city","venue","assign","TextAreaInput","rows","DateInput","rest","onChange","onBlur","onKeyDown","e","preventDefault","SelectInput","options","Select","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","useState","setActivity","setLoading","useEffect","finally","Grid","GridColumn","clearing","initialValues","dateAndTime","dateString","timeString","CombineDateAndTime","newActivity","uuid","Group","widths","floated","activityImageStyle","activityImageTextStyle","bottom","left","height","host","x","attendActivity","cancelAttendance","attached","padding","format","Column","Icon","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","commentId","Avatar","Author","Metadata","formatDistance","createdAt","Text","reset","labelPosition","primary","secondary","relaxed","divided","ribbon","Extra","LoadingComponenet","Dimmer","active","Loader","NotFound","Inline","Modal","onClose","isCurrentUser","Statistic","label","followingCount","Divider","Reveal","animated","visible","hidden","dropZoneStyles","borderColor","borderRadius","paddingTop","dropZoneActive","PhotoWidgetDropZone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","minHeight","overflow","ButtonGroup","ProfilePhotos","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","bio","editMode","setEditMode","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","styles","borderWidth","ActivityListItemAttendees","horizontal","Popup","trigger","circular","bordered","Description","activitiesByDate","group","setPredicate","marginTop","has","ActivityListItemPlaceholder","Placeholder","Line","Paragraph","setPage","totalPages","loadingNext","setLoadingNext","pageStart","loadMore","hasMore","initialLoad","ActivityFilter","Component","props","withRouter","location","setAppLoaded","getUser","exact","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c43ccf9b.chunk.js","sourcesContent":["import { IUser } from \"./../../models/user\";\nimport { IActivity, IAttendee } from \"./../../models/activity\";\n\nexport const CombineDateAndTime = (date: Date, time: Date) => {\n\n  // const timeString = time.getHours() + \":\" + time.getMinutes() + \":00\";\n  // const year = date.getFullYear();\n  // const month = date.getMonth() + 1;\n  // const day = date.getDate();\n  // const dateString = `${year}-${month}-${day}`;\n\n  const dateString = date.toISOString().split('T')[0];\n  const timeString = time.toISOString().split('T')[1];\n\n\n  return new Date(dateString + \"T\" + timeString);\n};\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n  activity.date = new Date(activity.date);\n  activity.isGoing = activity.userActivities.some(\n    (a) => a.username === user.username\n  );\n\n  activity.isHost = activity.userActivities.some(\n    (a) => a.username === user.username && a.isHost\n  );\n  return activity;\n};\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n    return{\n        displayName: user.displayName,\n        isHost: false,\n        username: user.username,\n        image: user.image!\n\n    }\n\n}","import { IProfile, IPhoto } from \"./../models/profile\";\nimport { IUser, IUserFormValues } from \"./../models/user\";\nimport { IActivity, IActivitiesEnvelope } from \"./../models/activity\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem(\"jwt\");\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === \"Network Error\" && !error.response) {\n    toast.error(\"Network error - make sure API is running!\");\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n  if (\n    status === 401 &&\n    headers[\"www-authenticate\"] ===\n      'Bearer error=\"invalid_token\", error_description=\"The token is expired\"'\n  ) {\n    console.log(error.response);\n    window.localStorage.removeItem(\"jwt\");\n    history.push(\"/\");\n    toast.info(\"Your Session has Expired, Please Login Again\");\n  }\n  if (\n    status === 400 &&\n    config.method === \"get\" &&\n    data.errors.hasOwnProperty(\"id\")\n  ) {\n    history.push(\"/notfound\");\n  }\n  if (status === 500) {\n    toast.error(\"Server error - check the terminal for more info!\");\n  }\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst requests = {\n  get: (url: string) => axios.get(url).then(responseBody),\n  post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\n  put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\n  del: (url: string) => axios.delete(url).then(responseBody),\n  postFrom: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append(\"File\", file);\n    return axios\n      .post(url, formData, {\n        headers: { \"Content-type\": \"multipart/form-data\" },\n      })\n      .then(responseBody);\n  },\n};\n\nconst Activities = {\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios\n      .get(\"/activities\", { params: params })\n      .then(responseBody),\n  details: (actvityId: string) => requests.get(`/activities/${actvityId}`),\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.activityId}`, activity),\n  delete: (activityId: string) => requests.del(`/activities/${activityId}`),\n  attend: (activityId: string) =>\n    requests.post(`/activities/${activityId}/attend`, {}),\n  unattend: (activityId: string) =>\n    requests.del(`/activities/${activityId}/attend`),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get(\"/user\"),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/login`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/register`, user),\n};\n\nconst Profiles = {\n  getProfile: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\n    requests.postFrom(`/photos`, photo),\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n  updateProfile: (profile: Partial<IProfile>) =>\n    requests.put(`/profiles`, profile),\n  follow: (username: string) =>\n    requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\n  listfollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`profiles/${username}/activities?predicate=${predicate}`),\n};\n\nexport default {\n  Activities,\n  User,\n  Profiles,\n};\n","import { createAttendee, setActivityProps } from \"./../common/util/util\";\nimport { RootStore } from \"./rootStore\";\nimport { IActivity } from \"./../models/activity\";\nimport { observable, action, computed, runInAction, reaction, toJS } from \"mobx\";\nimport { SyntheticEvent } from \"react\";\nimport agent from \"../api/agent\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from \"@microsoft/signalr\";\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = \"\";\n  @observable loading = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n  @observable activityCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate =(predicate: string, value: string | Date) => {\n    this.predicate.clear();\n    if(predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams(){\n    //defines methods to work with the query string of a URL\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT: 0}`);\n    this.predicate.forEach((value, key) => {\n      if(key === 'startDate'){\n        params.append(key, value.toISOString())\n      }\n      else{\n        params.append(key, value)\n      }  \n    })\n    return params\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  };\n\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log(\"Attempting to join group\");\n        if (this.hubConnection!.state === \"Connected\") {\n          this.hubConnection!.invoke(\"AddToGroup\", activityId);\n        }\n      })\n      .catch((error) => console.log(\"Error Establishing connection:\", error));\n\n    //Spelling Is Important here because its related to chatHub in ServerSide\n    this.hubConnection.on(\"RecieveComment\", (comment) => {\n      runInAction(() => {\n        this.activity!.comments.push(comment);\n      });\n    });\n\n    this.hubConnection.on(\"Send\", (message) => {\n      toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection!.invoke(\"RemoveFromGroup\", this.activity!.activityId)\n      .then(() => {\n        this.hubConnection!.stop();\n      })\n      .then(() => console.log(\"Connection Stopped\"))\n      .catch((err) => console.log(err));\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.activityId;\n    try {\n      //The Name 'SendComment' needs to match excatly with the name of the method in API ChatHub\n      await this.hubConnection!.invoke(\"SendComment\", values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = [...activities].sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split(\"T\")[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n      const { activities, activityCount } = activitiesEnvelope;\n      runInAction(\"loading activities\", () => {\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.activityId, activity);\n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(\"loading activities error\", () => {\n        this.loadingInitial = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action loadActivity = async (activityId: string) => {\n\n    //Load Acitivity From Cache and return it (This is returned as a JS Object)\n    //if not in cache, then get the activity from The API and return it(This is returned a JS Object).\n    let activity = this.getActivity(activityId);\n    if (activity) {\n      this.activity = activity;\n\n      //toJS, a property in mobx to convert observables to plain JS objects\n      return toJS(activity);\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(activityId);\n        runInAction(\"getting activity\", () => {\n          activity.date = new Date(activity.date);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n        });\n        return activity;\n      } catch (error) {\n        runInAction(\"get activity error\", () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  getActivity(id: string) {\n    return this.activityRegistry.get(id);\n  }\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.userActivities = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction(\"creating actvity\", () => {\n        this.activityRegistry.set(activity.activityId, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.activityId}`);\n    } catch (error) {\n      runInAction(\"creatingActivity error\", () => {});\n      toast.error(\"Problem submitting data\");\n      console.log(error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction(\"editing activity\", () => {\n        this.activityRegistry.set(activity.activityId, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.activityId}`);\n    } catch (error) {\n      runInAction(\"editing activity error\", () => {\n        this.submitting = false;\n      });\n      toast.error(\"Problem submitting data\");\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    activityId: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(activityId);\n\n      runInAction(\"deleting activit\", () => {\n        this.activityRegistry.delete(activityId);\n        this.submitting = false;\n        this.target = \"\";\n      });\n    } catch (error) {\n      runInAction(\"deleting activity error\", () => {\n        this.submitting = false;\n        this.target = \"\";\n      });\n      console.log(error);\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.activityId);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.userActivities.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.activityId, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem Signing Up to Activity\");\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.activityId);\n      runInAction(() => {\n        if (this.activity) {\n          //gets an array of all attenddes apart of the currently logged in User\n          this.activity.userActivities = this.activity.userActivities.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.username\n          );\n\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.activityId, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem Cancelling attendance\");\n    }\n  };\n}\n","import { history } from './../../index';\nimport { IUser, IUserFormValues } from './../models/user';\nimport { observable, computed, action, runInAction } from \"mobx\";\nimport agent from '../api/agent';\nimport { RootStore } from './rootStore';\n\nexport default class UserStore{\n    rootStore: RootStore;\n    constructor(rootStore: RootStore){\n      this.rootStore = rootStore;\n    }\n    \n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {return !! this.user}\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n                console.log('User is:' + user)\n            }) \n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities');\n        } catch (error) {\n            throw(error)\n        }\n    }\n\n    @action register = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.register(values);\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities');  \n        } catch (error) {\n            throw(error)\n        }\n    }\n\n    @action getUser = async () => {\n        try {\n          const user = await agent.User.current();\n          runInAction(() => {\n            this.user = user;\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n    @action logOut = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/');\n    }\n}","import { RootStore } from './rootStore';\nimport { observable, action, reaction } from 'mobx';\nexport default class CommonStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore){\n        this.rootStore = rootStore;\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                }else{\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    @observable token: string | null = window.localStorage.getItem('jwt');\n    @observable appLoaded = false;\n\n    @action setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    @action setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { RootStore } from './rootStore';\nimport { observable, action } from 'mobx';\n\nexport default class ModalStore{\n    rootStore: RootStore;\n    constructor(rootStore: RootStore){\n        this.rootStore = rootStore;\n    }\n\n\n    @observable.shallow modal = {\n        open: false,\n        body: null\n    }\n\n    @action openModal = (content: any) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    @action closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { computed, reaction } from \"mobx\";\nimport { runInAction } from \"mobx\";\nimport { IProfile, IPhoto, IUserActivity } from \"./../models/profile\";\nimport { RootStore } from \"./rootStore\";\nimport { observable, action } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { toast } from \"react-toastify\";\n\nexport default class ProfileStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.activeTab,\n      (activeTab) => {\n        if (activeTab === 3 || activeTab === 4) {\n          const predicate = activeTab === 3 ? \"followers\" : \"followings\";\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    );\n  }\n\n  @observable profile: IProfile | null = null;\n  @observable loadingProfile = true;\n  @observable uploadingPhoto = false;\n  @observable loading = false;\n  @observable followings: IProfile[] = [];\n  @observable activeTab: number = 0;\n  @observable userActivities: IUserActivity[] = [];\n  @observable loadingActivities = false;\n\n  @computed get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      // runInAction(() => {\n      //   this.profile.username = this.rootStore.userStore.user.username;\n      // })\n      return this.rootStore.userStore.user.username === this.profile.username;\n    } else {\n      return false;\n    }\n  }\n\n  @action loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n    try {\n      const activities = await agent.Profiles.listActivities(username, predicate!);\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      })\n    } catch (error) {\n      toast.error('Problem Loading Activities');\n      runInAction(() => {\n        this.loadingActivities= false;\n      });\n    }\n  };\n\n  @action setActiveTab = (activeIndex: number) => {\n    this.activeTab = activeIndex;\n  };\n\n  @action loadProfile = async (username: string) => {\n    this.loadingProfile = true;\n    try {\n      console.log(\"UserName Passed In: \" + username);\n      //This is not working for some reason, i have no idea why\n      //TODO FIX THIS\n      //////////////////////////////////////////////////////////\n      const profile = await agent.Profiles.getProfile(username);\n      /////////////////////////////////////////////////////////\n      console.log(profile.username);\n      console.log(profile);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingProfile = false;\n      });\n      console.log(error);\n    }\n  };\n\n  @action updateProfile = async (profile: Partial<IProfile>) => {\n    try {\n      await agent.Profiles.updateProfile(profile);\n      runInAction(() => {\n        if (\n          profile.displayName !== this.rootStore.userStore.user!.displayName\n        ) {\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\n        }\n        this.profile = { ...this.profile!, ...profile };\n      });\n    } catch (error) {\n      toast.error(\"Problem updating profile\");\n    }\n  };\n\n  @action uploadPhoto = async (file: Blob) => {\n    this.uploadingPhoto = true;\n    try {\n      const photo = await agent.Profiles.uploadPhoto(file);\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos.push(photo);\n          if (photo.isMain && this.rootStore.userStore.user) {\n            this.rootStore.userStore.user.image = photo.imageUrl;\n            this.profile.image = photo.imageUrl;\n          }\n        }\n        this.uploadingPhoto = false;\n      });\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Problem Uploading Photo\");\n      runInAction(() => {\n        this.uploadingPhoto = false;\n      });\n    }\n  };\n\n  @action setMainPhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.setMainPhoto(photo.id);\n      runInAction(() => {\n        this.rootStore.userStore.user!.image = photo.imageUrl;\n        this.profile!.photos.find((a) => a.isMain)!.isMain = false;\n        this.profile!.photos.find((a) => a.id === photo.id)!.isMain = true;\n        this.profile!.image = photo.imageUrl;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error(\"Problem Setting Photo as Main\");\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action deletePhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n      runInAction(() => {\n        this.profile!.photos = this.profile!.photos.filter(\n          (a) => a.id !== photo.id\n        );\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error(\"Problem Deleting The Photo\");\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action follow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.follow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount++;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error(\"Problem Following User\");\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action unfollow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.unfollow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount--;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error(\"Problem unFollowing User\");\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n\n  @action loadFollowings = async (predicate: string) => {\n    this.loading = true;\n    try {\n      const profiles = await agent.Profiles.listfollowings(\n        this.profile!.username,\n        predicate\n      );\n      runInAction(() => {\n        this.followings = profiles;\n        this.loading = false;\n      });\n    } catch (error) {\n      toast.error(\"Problem loading Followings\");\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  };\n}\n","import { createContext } from 'react';\nimport ActivityStore from \"./activityStore\";\nimport UserStore from \"./userStore\";\nimport { configure } from 'mobx';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\n\nconfigure({ enforceActions: \"always\" });\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore\n\n    constructor(){\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from \"react\";\nimport { Menu, Container, Button, Image, Dropdown } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { logOut, user } = rootStore.userStore;\n\n  console.log(\"USER\"+user);\n  return (\n    <Menu fixed=\"top\" inverted>\n      <Container>\n        <Menu.Item header as={NavLink} to=\"/\">\n          <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\n          Reactivities\n        </Menu.Item>\n        <Menu.Item name=\"Activities\" header as={NavLink} to=\"/activities\" />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            to=\"/createActivity\"\n            positive\n            content=\"Create Activity\"\n          />\n        </Menu.Item>\n        {user && (\n          <Menu.Item position='right'>\n            <Image avatar spaced='right' src={user.image || '/assets/user.png'} />\n            <Dropdown pointing='top left' text={user.displayName}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  as={Link}\n                  to={`/profile/${user.username}`}\n                  text='My profile'\n                  icon='user'\n                />\n                <Dropdown.Item onClick={logOut} text='Logout' icon='power' />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu.Item>\n        )}\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","import React from \"react\";\nimport { FieldRenderProps } from \"react-final-form\";\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\n\ninterface IProps\n  extends FieldRenderProps<string>,FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n  <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder}/>\n      {touched && error && (\n          <Label basic color='red'>\n              {error}\n          </Label>\n      )}\n  </Form.Field>\n  );\n};\n\nexport default TextInput;","import React from \"react\";\nimport { AxiosResponse } from \"axios\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n        <Message.List>\n          {Object.values(error.data.errors)\n            .flat()\n            .map((err, i) => (\n              <Message.Item key={i}>{err}</Message.Item>\n            ))}\n        </Message.List>\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Button, Header } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { FORM_ERROR } from \"final-form\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\n\nconst validate = combineValidators({\n  email: isRequired(\"email\"),\n  password: isRequired(\"password\"),\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        login(values).catch((error) => ({\n          [FORM_ERROR]: error,\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        form,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit\n      }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\n          <Field\n            name=\"password\"\n            component={TextInput}\n            placeholder=\"PassWord\"\n            type=\"password\"\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage error={submitError} text='Invalid UserName or Password'/>\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content=\"Login\"\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default LoginForm;\n","import React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Form, Button, Header } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { IUserFormValues } from '../../app/models/user';\nimport { FORM_ERROR } from 'final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n  username: isRequired('Username'),\n  displayName: isRequired('DisplayName'),\n  email: isRequired('Email'),\n  password: isRequired('Password')\n});\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        register(values).catch(error => ({\n          [FORM_ERROR]: error\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit\n      }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Header\n            as='h2'\n            content='Sign up to Reactivities'\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='username' component={TextInput} placeholder='Username' />\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder='Display Name'\n          />\n          <Field name='email' component={TextInput} placeholder='Email' />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder='Password'\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n            />\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content='Register'\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import React, { useContext, Fragment } from \"react\";\nimport { Container, Segment, Header, Button, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterationForm from \"../user/RegisterForm\";\n\nconst HomePage = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn, user } = rootStore.userStore;\n  const { openModal} = rootStore.modalStore;\n  const token = window.localStorage.getItem('jwt');\n\n\n  return (\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\n      <Container text>\n        <Header as=\"h1\" inverted>\n          <Image\n            size=\"massive\"\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginBottom: 12 }}\n          />\n          Reactivities\n        </Header>\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header\n              as=\"h2\"\n              inverted\n              content={`Welcome back ${user?.displayName}`}\n            />\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\n              Go To Activities\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\n            <Button onClick={() => openModal(<LoginForm />)} to=\"/login\" size=\"huge\" inverted>\n                Login\n            </Button>\n            <Button onClick={() => openModal(<RegisterationForm />)} to=\"/register\" size=\"huge\" inverted>\n                Register\n            </Button>\n          </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","export interface IActivitiesEnvelope{\n    activities: IActivity[];\n    activityCount: number;\n\n}\n//Mapped with Respect to ActivityDTO in API\nexport interface IActivity{\n    activityId: string;\n    title: string;\n    description: string;\n    category: string;\n    date: Date;\n    city: string;\n    venue: string;\n    isGoing: boolean;\n    isHost: boolean;\n    userActivities: IAttendee[]; \n    comments: IComment[];\n}\n\nexport interface IActivityFormValues extends Partial<IActivity>{\n    time?: Date\n}\n\nexport class ActivityFormValues implements IActivityFormValues{\n    activityId?: string = undefined;\n    title: string = \"\";\n    category: string = \"\";\n    description: string = \"\";\n    date?: Date = undefined;\n    time?: Date = undefined;\n    city: string = \"\";\n    venue: string = \"\";\n\n    constructor(init?: IActivityFormValues){\n        if(init && init.date){\n            init.time = init.date\n        }\n        Object.assign(this, init)\n    }\n}\n\n//Mapped with Respect to AttendeeDTO in API\nexport interface IAttendee {\n    username: string;\n    displayName: string;\n    image: string;\n    isHost: boolean;\n    following?: boolean; //if user is following the attendee\n}\n\n//Mapped with Respect to CommentDTO in API\nexport interface IComment{\n    commentId: string;\n    createdAt: Date;\n    body: string;\n    username: string;\n    displayName: string;\n    imageUrl: string;    \n}","import React from \"react\";\nimport { FieldRenderProps } from \"react-final-form\";\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\n\ninterface IProps\n  extends FieldRenderProps<string>,FormFieldProps {}\n\nexport const TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error },\n}) => {\n    return (\n      <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder}/>\n      {touched && error && (\n          <Label basic color='red'>\n              {error}\n          </Label>\n      )}\n  </Form.Field>\n    );\n};\n\nexport default TextAreaInput;\n","export const category = [\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\n    { key: 'culture', text: 'Culture', value: 'culture' },\n    { key: 'film', text: 'Film', value: 'film' },\n    { key: 'food', text: 'Food', value: 'food' },\n    { key: 'music', text: 'Music', value: 'music' },\n    { key: 'travel', text: 'Travel', value: 'travel' }\n  ];","import React from \"react\";\nimport { FieldRenderProps } from \"react-final-form\";\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date>, FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    id = null,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n}) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n       <DateTimePicker\n       placeholder={placeholder}\n       value={input.value || null}\n       onChange={input.onChange}\n       onBlur={input.onBlur}\n       onKeyDown={(e) => {\n           return e.preventDefault();\n       }}\n       date={date}\n       time={time}\n       {...rest}\n       />\n        {touched && error && (\n            <Label basic color='red'>\n                {error}\n            </Label>\n        )}\n    </Form.Field>\n    )\n}\n\nexport default DateInput;","import React from 'react'\nimport { FieldRenderProps } from \"react-final-form\";\nimport { FormFieldProps, Form, Label, Select } from \"semantic-ui-react\";\n\ninterface IProps\n  extends FieldRenderProps<string>,FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error },  \n}) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n            <Select\n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n            />\n      {touched && error && (\n          <Label basic color='red'>\n              {error}\n          </Label>\n      )}\n  </Form.Field>\n    );\n};\n\nexport default SelectInput","import React, { useState, useContext, useEffect } from \"react\";\nimport { Segment, Form, Button, Grid, GridColumn } from \"semantic-ui-react\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { category } from \"../../../app/common/options/categoryOptions\";\nimport DateInput from \"../../../app/common/form/DateInput\";\nimport { CombineDateAndTime } from \"../../../app/common/util/util\";\nimport {\n  combineValidators,\n  isRequired,\n  hasLengthGreaterThan,\n  composeValidators,\n} from \"revalidate\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst validate = combineValidators({\n  title: isRequired({ message: \"The Title is Requireed\" }),\n  category: isRequired({ message: \"Category\" }),\n  description: composeValidators(\n    isRequired(\"Description\"),\n    hasLengthGreaterThan(4)({\n      message: \"Description needs to be at least 5 characters\",\n    })\n  )(),\n\n  city: isRequired({ message: \"City\" }),\n  venue: isRequired({ message: \"Venue\" }),\n  date: isRequired({ message: \"Date\" }),\n  time: isRequired({ message: \"Time\" }),\n});\n\ninterface DetailParams {\n  id: string;\n}\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity,\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then((activity) => {\n          setActivity(new ActivityFormValues(activity));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = CombineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.activityId) {\n      let newActivity = {\n        ...activity,\n        activityId: uuid(),\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n    console.log(activity);\n  };\n\n  return (\n    <Grid>\n      <GridColumn width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  component={TextAreaInput}\n                  name=\"description\"\n                  rows={3}\n                  placeholder=\"Description\"\n                  value={activity.description}\n                />\n                <Field\n                  component={SelectInput}\n                  name=\"category\"\n                  placeholder=\"Category\"\n                  value={activity.category}\n                  options={category}\n                />\n                <Form.Group widths=\"equal\">\n                  <Field\n                    component={DateInput}\n                    name=\"date\"\n                    date={true}\n                    placeholder=\"Date\"\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name=\"time\"\n                    time={true}\n                    placeholder=\"Time\"\n                    value={activity.time}\n                  />\n                </Form.Group>\n                <Field\n                  component={TextInput}\n                  name=\"city\"\n                  placeholder=\"City\"\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name=\"venue\"\n                  placeholder=\"Venue\"\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated=\"right\"\n                  positive\n                  type=\"submit\"\n                  content=\"Submit\"\n                />\n                <Button\n                  onClick={\n                    activity.activityId\n                      ? () => history.push(`/activities/${activity.activityId}`)\n                      : () => history.push(\"/activities\")\n                  }\n                  disabled={loading}\n                  floated=\"right\"\n                  type=\"button\"\n                  content=\"Cancel\"\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </GridColumn>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React, { useContext } from 'react';\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst activityImageStyle = {\n  filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white'\n};\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\n  activity\n}) => {\n  const host = activity.userActivities.filter(x => x.isHost)[0];\n  const rootStore = useContext(RootStoreContext);\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n  return (\n    <Segment.Group>\n      <Segment basic attached='top' style={{ padding: '0' }}>\n        <Image\n          src={`/assets/categoryImages/${activity.category}.jpg`}\n          fluid\n          style={activityImageStyle}\n        />\n        <Segment style={activityImageTextStyle} basic>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Header\n                  size='huge'\n                  content={activity.title}\n                  style={{ color: 'white' }}\n                />\n                <p>{format(activity.date, 'eeee do MMMM')}</p>\n                <p>\n                  Hosted by{' '}\n                  <Link to={`/profile/${host.username}`}>\n                    <strong>{host.displayName}</strong>\n                  </Link>\n                </p>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Segment>\n      </Segment>\n      <Segment clearing attached='bottom'>\n        {activity.isHost ? (\n          <Button\n            as={Link}\n            to={`/manage/${activity.activityId}`}\n            color='orange'\n            floated='right'\n          >\n            Manage Event\n          </Button>\n        ) : activity.isGoing ? (\n          <Button loading={loading} onClick={cancelAttendance}>\n            Cancel attendance\n          </Button>\n        ) : (\n          <Button loading={loading} onClick={attendActivity} color='teal'>\n            Join Activity\n          </Button>\n        )}\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { IActivity } from '../../../app/models/activity'\nimport { observer } from 'mobx-react-lite';\nimport { format } from 'date-fns';\n\nexport const ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\n    return (\n        <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>\n              {format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h:mm a')}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>{activity.venue}, {activity.city}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n\n    );\n};\n\nexport default observer(ActivityDetailedInfo)\n\n\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Link } from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { formatDistance } from \"date-fns/esm\";\n\nexport const ActivityDetailedChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createHubConnection,\n    stopHubConnection,\n    addComment,\n    activity,\n  } = rootStore.activityStore;\n\n  useEffect(() => {\n    createHubConnection(activity!.activityId);\n    return () => {\n      stopHubConnection();\n    };\n  }, [activity, createHubConnection, stopHubConnection]);\n  return (\n    <Fragment>\n      <Segment\n        textAlign=\"center\"\n        attached=\"top\"\n        inverted\n        color=\"teal\"\n        style={{ border: \"none\" }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          {activity &&\n            activity.comments &&\n            activity.comments.map((comment) => (\n              <Comment key={comment.commentId}>\n                <Comment.Avatar src={comment.imageUrl || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>{formatDistance(comment.createdAt, new Date())} ago</div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form }) => (\n            //as soon as form is submitted, clear the fields and reset the form.\n            <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n              <Field name='body' component={TextAreaInput} rows={2} placeholder='Add your comment' />\n                <Button\n                  content=\"Add Reply\"\n                  labelPosition=\"left\"\n                  icon=\"edit\"\n                  primary\n                  loading={submitting}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React, { Fragment } from 'react';\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IAttendee } from '../../../app/models/activity';\nimport { observer } from 'mobx-react-lite';\n\ninterface IProps {\n  attendees: IAttendee[];\n}\n\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        style={{ border: 'none' }}\n        attached='top'\n        secondary\n        inverted\n        color='teal'\n      >\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map(attendee => (\n            <Item key={attendee.username} style={{ position: 'relative' }}>\n              {attendee.isHost && (\n                <Label\n                  style={{ position: 'absolute' }}\n                  color='orange'\n                  ribbon='right'\n                >\n                  Host\n                </Label>\n              )}\n              <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n              <Item.Content verticalAlign='middle'>\n                <Item.Header as='h3'>\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && \n                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import React from 'react'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\nconst LoadingComponenet: React.FC<{inverted?: boolean, content?: string}> = ({\n    inverted = true,\n    content\n}) => {\n    return (\n        <Dimmer active inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}\n\nexport default LoadingComponenet;","import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport LoadingComponenet from '../../../app/layout/LoadingComponenet';\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial) return <LoadingComponenet content='Loading activity...' />;\n\n  if (!activity) return <h2>Activity not found</h2>;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSidebar attendees={activity.userActivities} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import React, { useContext } from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ModalContainer = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size='mini'>\n      <Modal.Content>{body}</Modal.Content>\n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React from \"react\";\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal,\n} from \"semantic-ui-react\";\nimport { IProfile } from \"../../app/models/profile\";\nimport { observer } from \"mobx-react-lite\";\n\ninterface IProps {\n  profile: IProfile;\n  isCurrentUser: boolean;\n  loading: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\n\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow,\n}) => {\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column width={12}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size=\"small\"\n                src={profile.image || \"/assets/user.png\"}\n              />\n              <Item.Content verticalAlign=\"middle\">\n                <Header as=\"h1\">{profile.displayName}</Header>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Statistic.Group widths={2}>\n            <Statistic label=\"Followers\" value={profile.followersCount} />\n            <Statistic label=\"Following\" value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated=\"move\">\n              <Reveal.Content visible style={{ width: \"100%\" }}>\n                <Button\n                  fluid\n                  color=\"teal\"\n                  content={profile.following ? \"Following\" : \"NotFollowing\"}\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? \"red\" : \"green\"}\n                  content={profile.following ? \"Unfollow\" : \"Follow\"}\n                  onClick={\n                    profile.following\n                      ? () => unfollow(profile.username)\n                      : () => follow(profile.username)\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Icon, Header } from \"semantic-ui-react\";\n\ninterface IProps {\n  setFiles: (files: object[]) => void;\n}\n\nconst dropZoneStyles = {\n  border: \"dahsed 3px\",\n  borderColor: \"#eee\",\n  borderRadius: \"5px\",\n  paddingTop: \"30px\",\n  textAlign: \"center\" as \"center\",\n  height: \"200px\",\n};\n\nconst dropZoneActive = {\n  borderColor: \"green\",\n};\n\nconst PhotoWidgetDropZone: React.FC<IProps> = ({ setFiles }) => {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      // Do something with the files\n      setFiles(\n        acceptedFiles.map((file: object) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n    },\n    [setFiles]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style={\n        isDragActive ? { ...dropZoneStyles, ...dropZoneActive } : dropZoneStyles\n      }\n    >\n      <input {...getInputProps()} />\n      <Icon name=\"upload\" size=\"huge\" />\n      <Header content=\"Drop Image Here\" />\n    </div>\n  );\n};\n\nexport default PhotoWidgetDropZone;\n","import React, { useRef } from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\ninterface IProps {\n  setImage: (file: Blob) => void;\n  imagePreview: string;\n}\n\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n  const cropper = useRef<Cropper>(null);\n  const cropImage = () => {\n    if (\n      cropper.current &&\n      typeof cropper.current.getCroppedCanvas() === \"undefined\"\n    ) {\n      return;\n    }\n\n    cropper &&\n      cropper.current &&\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n        setImage(blob);\n      }, \"image/jpeg\");\n  };\n  return (\n    <Cropper\n      ref={cropper}\n      src={imagePreview}\n      style={{ height: 400, width: \"100%\" }}\n      // Cropper.js options\n      aspectRatio={1}\n      preview=\".img-preview\"\n      guides={false}\n      viewMode={1}\n      dragMode=\"move\"\n      scalable={true}\n      cropBoxMovable={true}\n      cropBoxResizable={true}\n      crop={cropImage}\n    />\n  );\n};\n\nexport default PhotoWidgetCropper;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Header, Grid, Button, ButtonGroup } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropZone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\ninterface IProps {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const [image, setImage] = useState<Blob | null>(null);\n\n  useEffect(() => {\n    return () => {\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  });\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={4}>\n          <Header color=\"teal\" sub content=\"Step 1 - Add Photo\" />\n          <PhotoWidgetDropZone setFiles={setFiles} />\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column width={4}>\n          <Header sub color=\"teal\" content=\"Step 2 - Resize image\" />\n          {files.length > 0 && (\n            <PhotoWidgetCropper\n              setImage={setImage}\n              imagePreview={files[0].preview}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column width={4}>\n          <Header sub color=\"teal\" content=\"Step 3 - Preview & Upload\" />\n          {files.length > 0 && (\n            <Fragment>\n              <div\n                className=\"img-preview\"\n                style={{ minHeight: \"200px\", overflow: \"hidden\" }}\n              />\n              <ButtonGroup widths={2}>\n                <Button\n                  positive\n                  icon=\"check\"\n                  loading={loading}\n                  onClick={() => uploadPhoto(image!)}\n                />\n                <Button\n                  icon=\"close\"\n                  disabled={loading}\n                  onClick={() => setFiles([])}\n                />\n              </ButtonGroup>\n            </Fragment>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PhotoUploadWidget);\n","import React, { useContext, useState } from \"react\";\nimport { Tab, Header, Card, Image, Button, Grid, ButtonGroup } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\nimport { observer } from \"mobx-react-lite\";\n\nexport const ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    isCurrentUser,\n    uploadPhoto,\n    uploadingPhoto,\n    setMainPhoto,\n    deletePhoto,\n    loading,\n  } = rootStore.profileStore;\n\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\n  const [target, setTarget] = useState<string | undefined>(undefined);\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\n\n  const handleUploadImage = (photo: Blob) => {\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\n  };\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n          {isCurrentUser && (\n            <Button\n            onClick={() => setAddPhotoMode(!addPhotoMode)}\n              floated=\"right\"\n              basic\n              content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploadingPhoto}\n            />\n          ) : (\n            <Card.Group itemsPerRow={5}>\n              {profile &&\n                profile.photos.map((photo) => (\n                  <Card key={photo.id}>\n                    <Image src={photo.imageUrl} />\n                    {isCurrentUser && (\n                      <ButtonGroup fluid widths={2}>\n                        <Button\n                        name={photo.id}\n                          onClick={(e) => {\n                            setMainPhoto(photo);\n                            setTarget(e.currentTarget.name)\n                          }}\n                          disabled={photo.isMain}\n                          loading={loading && target === photo.id}\n                          basic\n                          positive\n                          content=\"Main\"\n                        />\n                        <Button name={photo.id} disabled={photo.isMain} onClick={(e) => {\n                          deletePhoto(photo);\n                          setDeleteTarget(e.currentTarget.name)\n                        }} \n                        loading={loading && deleteTarget === photo.id} \n                        basic negative icon=\"trash\" />\n                      </ButtonGroup>\n                    )}\n                  </Card>\n                ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfilePhotos);\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport { IProfile } from \"../../app/models/profile\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../app/common/form/TextAreaInput\";\nimport { Form as FinalForm, Field } from 'react-final-form';\n\nconst validate = combineValidators({\n  displayName: isRequired(\"displayName\"),\n});\n\ninterface IProps {\n  updateProfile: (profile: Partial<IProfile>) => void;\n  profile: IProfile;\n}\n\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\n  return (\n    <FinalForm\n      onSubmit={updateProfile}\n      validate={validate}\n      initialValues={profile!}\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Field\n            name=\"displayName\"\n            component={TextInput}\n            placeholder=\"Display Name\"\n            value={profile!.displayName}\n          />\n          <Field\n            name=\"bio\"\n            component={TextAreaInput}\n            rows={3}\n            placeholder=\"Bio\"\n            value={profile!.bio}\n          />\n          <Button\n            loading={submitting}\n            floated=\"right\"\n            disabled={invalid || pristine}\n            positive\n            content=\"Update profile\"\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default observer(ProfileEditForm);\n","import React, { useContext, useState } from 'react';\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileEditForm from './ProfileEditForm';\n\nconst ProfileDescription = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\n  const [editMode, setEditMode] = useState(false);\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={`About ${profile!.displayName}`}\n          />\n          {isCurrentUser && (\n            <Button\n              floated='right'\n              basic\n              content={editMode ? 'Cancel' : 'Edit Profile'}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\n          ) : (\n            <span>{profile!.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileDescription);\n","\nimport React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IProfile } from '../../app/models/profile';\n\ninterface IProps{\n    profile: IProfile\n}\n\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n  return (\n    <Card as={Link} to={`/profile/${profile.username}`}>\n      <Image src={profile.image ||'/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Icon name='user' />\n          {profile.followersCount} Followers\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default ProfileCard;","import React, { useContext } from 'react';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { profile, followings, loading, activeTab } = rootStore.profileStore;\n\n  return (\n    <Tab.Pane loading={loading}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={\n              activeTab === 3\n                ? `People following ${profile!.displayName}`\n                : `People ${profile!.displayName} is following`\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={5}>\n              {followings.map((profile)=>(\n <ProfileCard key={profile.username} profile={profile} />\n              ))}\n        \n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileFollowings;\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst panes = [\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\n];\n\nconst ProfileEvents = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate;\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'past';\n        break;\n      case 2:\n        predicate = 'hosting';\n        break;\n      default:\n        predicate = 'future';\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={'Activities'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4}>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileEvents);\n","import React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport { ProfilePhotos } from './ProfilePhotos'\nimport ProfileDescription from './ProfileDescription'\nimport ProfileFollowings from './ProfileFollowings'\nimport ProfileActivities from './ProfileActivities'\n\n//An Array of Objects which has a menuItem fopr the Content of the Page\nconst panes = [\n    {menuItem: 'About', render: () => <ProfileDescription/> },\n    {menuItem: 'Photos', render: () => <ProfilePhotos/> },\n    {menuItem: 'Activities', render: () => <ProfileActivities/>},\n    {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n    {menuItem: 'Following', render: () => <ProfileFollowings/> }\n]\n\ninterface IProps{\n    setActiveTab: (activeIndex: any) => void;\n}\n\nconst ProfileContent: React.FC<IProps> = ({setActiveTab}) => {\n    return (\n        <Tab\n        menu={{fluid: true, vertical: true}}\n        menuPosition='right'\n        panes={panes}\n        onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n        />\n    )\n}\n\nexport default ProfileContent;","import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ProfileHeader from './ProfileHeader';\nimport ProfileContent from './ProfileContent';\nimport { RouteComponentProps } from 'react-router';\nimport { observer } from 'mobx-react-lite';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport LoadingComponenet from '../../app/layout/LoadingComponenet';\n\ninterface RouteParams {\n  username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadingProfile,\n    profile,\n    loadProfile,\n    follow,\n    unfollow,\n    isCurrentUser,\n    loading,\n    setActiveTab\n  } = rootStore.profileStore;\n\n  console.log(\"test \" + match.params.username)\n  useEffect(() => {\n    loadProfile(match.params.username);\n  }, [loadProfile, match]);\n\n  if (loadingProfile) return <LoadingComponenet content='Loading profile...' />;\n\n  return (\n    <Grid>\n      <Grid.Column width={16}>\n        <ProfileHeader\n          profile={profile!}\n          isCurrentUser={isCurrentUser}\n          loading={loading}\n          follow={follow}\n          unfollow={unfollow}\n        />\n        <ProfileContent setActiveTab={setActiveTab}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ProfilePage);\n","import React from \"react\";\nimport { List, Image, Popup } from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\n\nconst styles = {\n  borderColor: 'orange',\n  borderWidth: 2\n}\n\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\n    return (\n      <List horizontal>\n        {attendees.map(attendee => (\n          <List.Item key={attendee.username}>\n            <Popup\n              header={attendee.displayName}\n              trigger={\n                <Image\n                  size='mini'\n                  circular\n                  src={attendee.image || '/assets/user.png'}\n                  bordered\n                  style={attendee.following ? styles : null}\n                />\n              }\n            />\n          </List.Item>\n        ))}\n      </List>\n    );\n  };\n  \n\nexport default ActivityListItemAttendees;\n","import React from 'react';\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IActivity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\nimport { observer } from 'mobx-react-lite';\nimport 'mobx-react-lite/batchingForReactDom'\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n  const host = activity.userActivities.filter(x => x.isHost)[0];\n  return (\n    <Segment.Group>\n      <Segment>\n        <Item.Group>\n          <Item>\n            <Item.Image\n              size='tiny'\n              circular\n              src={host.image || '/assets/user.png'}\n              style={{ marginBottom: 3 }}\n            />\n            <Item.Content>\n              <Item.Header as={Link} to={`/activities/${activity.activityId}`}>\n                {activity.title}\n              </Item.Header>\n              <Item.Description>\n                Hosted by\n                <Link to={`/profile/${host.username}`}> {host.displayName}</Link>\n              </Item.Description>\n              {activity.isHost && (\n                <Item.Description>\n                  <Label\n                    basic\n                    color='orange'\n                    content='You are hosting this activity'\n                  />\n                </Item.Description>\n              )}\n              {activity.isGoing && !activity.isHost && (\n                <Item.Description>\n                  <Label\n                    basic\n                    color='green'\n                    content='You are going to this activity'\n                  />\n                </Item.Description>\n              )}\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        <Icon name='clock' /> {format(activity.date, 'h:mm a')}\n        <Icon name='marker' /> {activity.venue}, {activity.city}\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendees attendees={activity.userActivities} />\n      </Segment>\n      <Segment clearing>\n        <span>{activity.description}</span>\n        <Button\n          as={Link}\n          to={`/activities/${activity.activityId}`}\n          floated='right'\n          content='View'\n          color='blue'\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default observer(ActivityListItem);\n","import React, { useContext, Fragment } from 'react';\nimport { Item, Label } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport {format} from 'date-fns';\n\nconst ActivityList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { activitiesByDate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Label size='large' color='blue'>\n            {format(group, 'eeee do MMMM')}\n          </Label>\n          <Item.Group divided>\n            {activities.map(activity => (\n              <ActivityListItem key={activity.activityId} activity={activity} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Header } from \"semantic-ui-react\";\nimport { Calendar } from \"react-widgets\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ActivityFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { predicate, setPredicate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\", marginTop: 50 }}>\n        <Header icon={\"filter\"} attached color={\"teal\"} content={\"Filters\"} />\n        <Menu.Item\n          active={predicate.size === 0}\n          onClick={() => setPredicate(\"all\", \"true\")}\n          color={\"blue\"}\n          name={\"all\"}\n          content={\"All Activities\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isGoing\")}\n          onClick={() => setPredicate(\"isGoing\", \"true\")}\n          color={\"blue\"}\n          name={\"username\"}\n          content={\"I'm Going\"}\n        />\n        <Menu.Item\n          active={predicate.has(\"isHost\")}\n          onClick={() => setPredicate(\"isHost\", \"true\")}\n          color={\"blue\"}\n          name={\"host\"}\n          content={\"I'm hosting\"}\n        />\n      </Menu>\n      <Header\n        icon={\"calendar\"}\n        attached\n        color={\"teal\"}\n        content={\"Select Date\"}\n      />\n      <Calendar \n      onChange={(date) => setPredicate(\"startDate\", date!)}\n      value={predicate.get('startDate') || new Date()}\n      />\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityFilters);\n","\nimport React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid style={{ marginTop: 50 }}>\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' floated='right' content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport ActivityList from \"./ActivityList\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityFilter from \"./ActivityFilter\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceHolder\";\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n  } = rootStore.activityStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1);\n    loadActivities().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        {loadingInitial && page === 0 ? (\n          <ActivityListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <ActivityList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityFilter />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import React, { useContext } from 'react'\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom'\nimport { RootStoreContext } from '../stores/rootStore'\nimport { observer } from 'mobx-react-lite';\n\ninterface IProps extends RouteProps{\n    component: React.ComponentType<RouteComponentProps<any>>\n}\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest}) => {\n    const rootStore = useContext(RootStoreContext);\n    const {isLoggedIn} = rootStore.userStore;\n\n    return (\n      <Route \n      {...rest}\n      render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />}\n      />\n    )\n}\n\nexport default observer(PrivateRoute);","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport { observer } from 'mobx-react-lite';\nimport {\n  Route,\n  withRouter,\n  RouteComponentProps,\n  Switch\n} from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport {ToastContainer} from 'react-toastify';\nimport { RootStoreContext } from '../stores/rootStore';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport LoadingComponent from './LoadingComponenet';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashBoard';\nimport PrivateRoute from './PrivateRoute';\n\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\n  const {getUser} = rootStore.userStore;\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded())\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token])\n\n  if (!appLoaded)  return <LoadingComponent content='Loading app...' />\n\n  return (\n    <Fragment>\n      <ModalContainer />\n      <ToastContainer position='bottom-right' />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={['/createActivity', '/manage/:id']}\n                  component={ActivityForm}\n                />\n                <PrivateRoute path='/profile/:username' component={ProfilePage} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {useEffect} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [pathname]);\n  \n    return children || null;\n  };\n  \n  export default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router} from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history}>\n    <ScrollToTop>\n        <App />\n    </ScrollToTop>\n    </Router>,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}